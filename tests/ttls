#!/bin/bash -e
# Copyright (C) 2023 Simo Sorce <simo@redhat.com>
# SPDX-License-Identifier: Apache-2.0

source "${TESTSSRCDIR}/helpers.sh"

title PARA "Test SSL_CTX creation"
$CHECKER "${TESTBLDDIR}/tlsctx"

title PARA "Test setting cert/keys on TLS Context"
$CHECKER "${TESTBLDDIR}/tlssetkey" "${ECCRTURI}" "${ECPRIURI}"

if [ -n "$ECBASE2URI" ]; then
    title PARA "Test setting cert/keys on TLS Context w/o pub key"
    $CHECKER "${TESTBLDDIR}/tlssetkey" "${ECCRT2URI}" "${ECPRI2URI}"
fi

title PARA "Test an actual TLS connection"

rm -f "${TMPPDIR}/s_server_output"
rm -f "${TMPPDIR}/s_server_ready"
mkfifo "${TMPPDIR}/s_server_ready"

SERVER_PID=-1
# Make sure we terminate programs if test fails in the middle
# shellcheck disable=SC2317  # Shellcheck for some reason does not follow trap
wait_for_server_at_exit() {
    wait "$1"
    echo "Server output:"
    cat "${TMPPDIR}/s_server_output"
}
trap 'wait_for_server_at_exit $SERVER_PID;' EXIT

PORT=23456

run_test() {
    KEY="$1"
    CERT="$2"
    SRV_ARGS=$3
    CLNT_ARGS=$4
    expect -c "spawn $CHECKER openssl s_server -accept \"${PORT}\" -naccept 1 -key \"${KEY}\" -cert \"${CERT}\" $SRV_ARGS;
        set timeout 60;
        expect {
            \"ACCEPT\" {};
            default {
                send \" NO ACCEPT \n\";
                exit 1;
            };
        }
        set server_ready [open \"${TMPPDIR}/s_server_ready\" w+];
        puts \$server_ready \"READY\n\";
        close \$server_ready;
        expect {
            \"END SSL SESSION PARAMETERS\" {};
            default {
                send \" NO SESSION PARAMETERS \n\";
                exit 1;
            };
        }
        send \" TLS SUCCESSFUL \n\"
        send \"Q\n\"
        expect {
            eof {exit 0;};
            default {
                send \" NO EOF \n\";
                exit 1;
            };
        }" > "${TMPPDIR}/s_server_output" &
    SERVER_PID=$!

    read -r < "${TMPPDIR}/s_server_ready"

    expect -c "spawn $CHECKER openssl s_client -connect \"localhost:${PORT}\" -CAfile \"${CACRT}\" $CLNT_ARGS;
        set timeout 60;
        expect {
            \" TLS SUCCESSFUL \" {};
            default {
                send \" NO TLS SUCCESSFUL MESSAGE \n\";
                exit 1;
            };
        }
        expect {
            eof {exit 0;};
            default {
                send \" NO EOF \n\";
                exit 1;
            };
        }"

    wait_for_server_at_exit $SERVER_PID
}

title PARA "Run sanity test with default values (RSA)"
run_test "$PRIURI" "$CRTURI"

title PARA "Run sanity test with default values (ECDSA)"
run_test "$ECPRIURI" "$ECCRTURI"

title PARA "Run test with TLS 1.2"
run_test "$PRIURI" "$CRTURI" "" "-tls1_2"

title PARA "Run test with explicit TLS 1.3"
run_test "$PRIURI" "$CRTURI" "" "-tls1_3"

title PARA "Run test with TLS 1.2 (ECDSA)"
run_test "$ECPRIURI" "$ECCRTURI" "" "-tls1_2"

title PARA "Run test with TLS 1.2 and ECDH"
run_test "$ECPRIURI" "$ECCRTURI" "" "-tls1_2 -cipher ECDHE-ECDSA-AES128-GCM-SHA256 -groups secp256r1"

#Try again forcing all operations on the token
#We need to disable digest operations as OpenSSL depends on context duplication working
ORIG_OPENSSL_CONF=${OPENSSL_CONF}
sed -e "s/#MORECONF/alg_section = algorithm_sec\n\n[algorithm_sec]\ndefault_properties = ?provider=pkcs11/" \
    -e "s/#pkcs11-module-block-operations/pkcs11-module-block-operations = digest/" \
    "${OPENSSL_CONF}" > "${OPENSSL_CONF}.forcetoken"
OPENSSL_CONF=${OPENSSL_CONF}.forcetoken

title PARA "Run test with TLS 1.3 preferring token functions"
run_test "$ECPRIURI" "$ECCRTURI" "" "-tls1_3"

OPENSSL_CONF=${ORIG_OPENSSL_CONF}


exit 0;
