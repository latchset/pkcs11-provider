#!/bin/bash -e
# Copyright (C) 2023 Simo Sorce <simo@redhat.com>
# SPDX-License-Identifier: Apache-2.0

source "${TESTSSRCDIR}/helpers.sh"

title PARA "Test SSL_CTX creation"
$CHECKER "${TESTBLDDIR}/tlsctx"

title PARA "Test an actual TLS connection"

rm -f "${TMPPDIR}/s_server_output"
rm -f "${TMPPDIR}/s_server_ready"
mkfifo "${TMPPDIR}/s_server_ready"

SERVER_PID=-1
# Make sure we terminate programs if test fails in the middle
# shellcheck disable=SC2317  # Shellcheck for some reason does not follow trap
wait_for_server_at_exit() {
    wait "$1"
    echo "Server output:"
    cat "${TMPPDIR}/s_server_output"
}
trap 'wait_for_server_at_exit $SERVER_PID;' EXIT

PORT=23456

run_test() {
    KEY="$1"
    CERT="$2"
    SRV_ARGS=$3
    CLNT_ARGS=$4
    expect -c "spawn $CHECKER openssl s_server -accept \"${PORT}\" -naccept 1 -key \"${KEY}\" -cert \"${CERT}\" $SRV_ARGS;
        set timeout 60;
        expect {
            \"ACCEPT\" {};
            default {exit 1;};
        }
        set server_ready [open \"${TMPPDIR}/s_server_ready\" w+];
        puts \$server_ready \"READY\n\";
        close \$server_ready;
        expect {
            \"END SSL SESSION PARAMETERS\" {};
            default {exit 1;};
        }
        send \" TLS SUCCESSFUL \n\"
        send \"Q\n\"
        expect {
            eof {exit 0;};
            default {exit 1;};
        }" 2>&1 | tee "${TMPPDIR}/s_server_output" &
    SERVER_PID=$!

    read -r < "${TMPPDIR}/s_server_ready"

    # The point is to force the server to use the pkcs11-provider for all operations, not the client now
    OPENSSL_CONF="${ORIG_OPENSSL_CONF}" \
    expect -c "spawn $CHECKER openssl s_client -connect \"localhost:${PORT}\" -CAfile \"${CACRT}\" $CLNT_ARGS;
        set timeout 60;
        expect {
            \" TLS SUCCESSFUL \" {};
            default {exit 1;};
        }
        expect {
            eof {exit 0;};
            default {exit 1;};
        }"

    wait_for_server_at_exit $SERVER_PID
}

run_tests() {

    title PARA "Run sanity test with default values (RSA)"
    run_test "$PRIURI" "$CRTURI"

    title PARA "Run sanity test with default values (ECDSA)"
    run_test "$ECPRIURI" "$ECCRTURI"

    title PARA "Run test with TLS 1.2"
    run_test "$PRIURI" "$CRTURI" "" "-tls1_2"

    title PARA "Run test with explicit TLS 1.3"
    run_test "$PRIURI" "$CRTURI" "" "-tls1_3"

    title PARA "Run test with TLS 1.2 (ECDSA)"
    run_test "$ECPRIURI" "$ECCRTURI" "-tls1_2" "-tls1_2"

    title PARA "Run test with TLS 1.2 and ECDH"
    run_test "$ECPRIURI" "$ECCRTURI" "" "-tls1_2 -cipher ECDHE-ECDSA-AES128-GCM-SHA256 -groups secp256r1"
}

title SECTION "TLS with key in provider"
ORIG_OPENSSL_CONF=${OPENSSL_CONF}
run_tests
title ENDSECTION

title SECTION "Forcing the provider for all server operations"
ORIG_OPENSSL_CONF=${OPENSSL_CONF}
sed \
    -e "s/^#pkcs11-module-cache-keys.*$/pkcs11-module-cache-keys = false/" \
    -e "s/^#pkcs11-module-block-operations.*$/pkcs11-module-block-operations = digest/" \
    -e "s/pkcs11-module-quirks = /pkcs11-module-quirks = no-operation-state /" \
    -e "s/^##QUIRKS$/pkcs11-module-quirks = no-operation-state/" \
    -e "s/#MORECONF/alg_section = algorithm_sect/" \
    "${OPENSSL_CONF}" > "${OPENSSL_CONF}.force"
echo "[algorithm_sect]" >> "${OPENSSL_CONF}.force"
echo "default_properties = ?provider=pkcs11" >> "${OPENSSL_CONF}.force"
OPENSSL_CONF=${OPENSSL_CONF}.force

run_tests
OPENSSL_CONF=${ORIG_OPENSSL_CONF}
title ENDSECTION

exit 0;
